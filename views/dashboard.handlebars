<div class="dashboard">
    <div class="welcome-message">
        <h1>Welcome to your Dashboard</h1>
        <p>Hello, {{user.email}}! Your monitoring dashboard is ready.</p>
    </div>

    {{#if errors}}
        <div class="error-messages">
            {{#each errors}}
                <div class="error-message">{{this.msg}}</div>
            {{/each}}
        </div>
    {{/if}}

    {{#if success}}
        <div class="success-message">{{success}}</div>
    {{/if}}

    <div class="dashboard-content">
        <div class="dashboard-section">
            <h2>Monitors</h2>
            
            {{#if monitors.length}}
                <div class="monitors-list">
                    {{#each monitors}}
                        <div class="monitor-item">
                            <div class="monitor-info">
                                <h3 class="monitor-name">{{this.name}}</h3>
                                <p class="monitor-url">{{this.url}}</p>
                                <div class="monitor-meta">
                                    <span class="check-interval">Checks every {{this.interval_minutes}} minute{{#if (gt this.interval_minutes 1)}}s{{/if}}</span>
                                    {{#if this.last_check}}
                                        <span class="last-check">Last checked: {{formatDate this.last_check}}</span>
                                    {{/if}}
                                </div>
                            </div>
                            <div class="monitor-status">
                                <span class="status status-{{this.status}}">
                                    {{#if (eq this.status 'up')}}
                                        UP
                                    {{else if (eq this.status 'down')}}
                                        DOWN
                                    {{else}}
                                        UNKNOWN
                                    {{/if}}
                                </span>
                                {{#if (eq this.status 'up')}}
                                    {{#if this.response_time}}
                                        <span class="response-time">{{this.response_time}}ms</span>
                                    {{/if}}
                                {{else if this.error_message}}
                                    <span class="error-message">{{this.error_message}}</span>
                                {{/if}}
                            </div>
                            <div class="monitor-actions">
                                <button class="btn btn-danger btn-sm delete-monitor-btn" data-monitor-id="{{this.id}}" data-monitor-name="{{this.name}}">Delete</button>
                            </div>
                        </div>
                    {{/each}}
                </div>
            {{else}}
                <p class="no-monitors">No monitors configured yet. Start by adding your first monitor.</p>
            {{/if}}

            <button class="btn btn-primary" id="add-monitor-btn">Add Monitor</button>

            <!-- Confirmation Dialog (initially hidden) -->
            <div class="confirmation-dialog" id="delete-confirmation-dialog" style="display: none;">
                <div class="confirmation-overlay">
                    <div class="confirmation-content">
                        <h3>Confirm Deletion</h3>
                        <p>Are you sure you want to delete the monitor "<span id="monitor-name-display"></span>"?</p>
                        <p>This action cannot be undone and the monitor will stop checking immediately.</p>
                        <div class="confirmation-actions">
                            <button class="btn btn-danger confirm-delete-btn">Delete Monitor</button>
                            <button class="btn btn-secondary cancel-delete-btn">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add Monitor Form (initially hidden) -->
            <div class="add-monitor-form" id="add-monitor-form" style="display: none;">
                <h3>Add New Monitor</h3>
                <form action="/monitors" method="POST">
                    <div class="form-group">
                        <label for="name">Monitor Name</label>
                        <input type="text" name="name" id="name" placeholder="My Website">
                    </div>
                    
                    <div class="form-group">
                        <label for="url">URL</label>
                        <input type="text" name="url" id="url" placeholder="https://example.com">
                    </div>
                    
                    <div class="form-group">
                        <label for="interval">Check Interval</label>
                        <select name="interval" id="interval">
                            <option value="">Select interval...</option>
                            <option value="1">1 minute</option>
                            <option value="5">5 minutes</option>
                            <option value="15">15 minutes</option>
                            <option value="30">30 minutes</option>
                            <option value="60">1 hour</option>
                        </select>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" id="submit-monitor-btn">Add Monitor</button>
                        <button type="button" class="btn btn-secondary" id="cancel-monitor-btn">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="dashboard-section">
            <h2>Recent Activity</h2>
            {{#if monitors.length}}
                <p>Monitoring {{monitors.length}} website{{#if (gt monitors.length 1)}}s{{/if}}.</p>
            {{else}}
                <p>No monitors configured yet.</p>
            {{/if}}
        </div>
    </div>
</div>

<!-- Toast Notification Container -->
<div id="toast-container"></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const addBtn = document.getElementById('add-monitor-btn');
    const form = document.getElementById('add-monitor-form');
    const cancelBtn = document.getElementById('cancel-monitor-btn');
    const deleteDialog = document.getElementById('delete-confirmation-dialog');
    const confirmDeleteBtn = document.querySelector('.confirm-delete-btn');
    const cancelDeleteBtn = document.querySelector('.cancel-delete-btn');
    const monitorNameDisplay = document.getElementById('monitor-name-display');
    
    let currentMonitorId = null;

    // Toast notification functions
    function showToast(message, type = 'success', duration = 4000) {
        const toastContainer = document.getElementById('toast-container');
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icon = getToastIcon(type);
        
        toast.innerHTML = `
            <span class="toast-icon">${icon}</span>
            <span class="toast-message">${message}</span>
            <button class="toast-close" onclick="removeToast(this)">×</button>
        `;
        
        toastContainer.appendChild(toast);
        
        // Trigger animation
        setTimeout(() => {
            toast.classList.add('show');
        }, 100);
        
        // Auto remove after duration
        setTimeout(() => {
            removeToast(toast.querySelector('.toast-close'));
        }, duration);
    }
    
    function getToastIcon(type) {
        switch(type) {
            case 'success': return '✓';
            case 'error': return '✕';
            case 'warning': return '⚠';
            default: return 'ℹ';
        }
    }
    
    window.removeToast = function(closeBtn) {
        const toast = closeBtn.parentElement;
        toast.classList.remove('show');
        setTimeout(() => {
            toast.remove();
        }, 300);
    };

    addBtn.addEventListener('click', function() {
        form.style.display = 'block';
        addBtn.style.display = 'none';
    });

    cancelBtn.addEventListener('click', function() {
        form.style.display = 'none';
        addBtn.style.display = 'block';
        // Reset form
        form.querySelector('form').reset();
    });

    // Handle delete button clicks
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-monitor-btn')) {
            currentMonitorId = e.target.getAttribute('data-monitor-id');
            const monitorName = e.target.getAttribute('data-monitor-name');
            monitorNameDisplay.textContent = monitorName;
            deleteDialog.style.display = 'block';
        }
    });

    // Handle confirmation dialog buttons
    confirmDeleteBtn.addEventListener('click', async function() {
        if (!currentMonitorId) return;

        try {
            const response = await fetch(`/monitors/${currentMonitorId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();

            if (response.ok) {
                // Remove the monitor from the DOM
                const monitorToDelete = document.querySelector(`[data-monitor-id="${currentMonitorId}"]`).closest('.monitor-item');
                monitorToDelete.remove();
                
                // Check if there are no monitors left and show the "no monitors" message
                const remainingMonitors = document.querySelectorAll('.monitor-item');
                if (remainingMonitors.length === 0) {
                    const monitorsContainer = document.querySelector('.monitors-list');
                    if (monitorsContainer) {
                        monitorsContainer.remove();
                    }
                    
                    const addMonitorBtn = document.getElementById('add-monitor-btn');
                    const noMonitorsMsg = document.createElement('p');
                    noMonitorsMsg.className = 'no-monitors';
                    noMonitorsMsg.textContent = 'No monitors configured yet. Start by adding your first monitor.';
                    addMonitorBtn.parentNode.insertBefore(noMonitorsMsg, addMonitorBtn);
                }

                // Show success toast
                showToast(result.message, 'success');

                // Hide dialog
                deleteDialog.style.display = 'none';
                currentMonitorId = null;
            } else {
                showToast(result.error, 'error');
            }
        } catch (error) {
            console.error('Delete error:', error);
            showToast('Failed to delete monitor. Please try again.', 'error');
        }
    });

    cancelDeleteBtn.addEventListener('click', function() {
        deleteDialog.style.display = 'none';
        currentMonitorId = null;
    });

    // Close dialog when clicking overlay
    deleteDialog.addEventListener('click', function(e) {
        if (e.target === deleteDialog || e.target.classList.contains('confirmation-overlay')) {
            deleteDialog.style.display = 'none';
            currentMonitorId = null;
        }
    });

    // Auto-refresh the page every 30 seconds to show updated statuses
    setInterval(function() {
        window.location.reload();
    }, 30000);
});
</script>